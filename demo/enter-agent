#!/bin/bash
set -euo pipefail

debug_enabled() {
  [ -n "${CLAUDE_AGENT_DEBUG:-}" ]
}

log_debug() {
  if debug_enabled; then
    printf '[DEBUG] %s\n' "$1" >&2
  fi
}

AGENT_ID="${1:-}"
if [ -z "$AGENT_ID" ]; then
  echo "Usage: enter-agent <agent_id>"
  exit 1
fi

REGISTRY="./agent-responses/.active-pids.json"

# Poll for session ID (may not be captured yet)
for i in {1..20}; do
  if [ ! -f "$REGISTRY" ]; then
    echo "Registry not found, retrying..." >&2
    sleep 0.5
    continue
  fi

  SESSION_ID=$(jq -r ".\"$AGENT_ID\".sessionId // empty" "$REGISTRY" 2>/dev/null || echo "")
  AGENT_STATUS=$(jq -r ".\"$AGENT_ID\".agentType // empty" "$REGISTRY" 2>/dev/null || echo "")

  if [ -n "$SESSION_ID" ]; then
    break
  fi

  if [ $i -eq 1 ]; then
    echo "Waiting for agent session ID..." >&2
  fi
  sleep 0.5
done

if [ -z "$SESSION_ID" ]; then
  echo "Error: Agent $AGENT_ID not found or session not captured" >&2
  exit 1
fi

# Extract parent session for return
PARENT_SESSION=$(jq -r ".\"$AGENT_ID\".parentSessionId // empty" "$REGISTRY" 2>/dev/null || echo "")

if [ -z "$PARENT_SESSION" ]; then
  echo "Warning: Parent session not tracked - use 'claude -r' to browse sessions for return" >&2
else
  echo "Parent session: $PARENT_SESSION (return with 'exec claude --resume $PARENT_SESSION')" >&2
fi

# Check if agent already terminated
AGENT_LOG="./agent-responses/${AGENT_ID}.md"
if [ -f "$AGENT_LOG" ]; then
  STATUS=$(grep "^Status:" "$AGENT_LOG" | tail -1 | awk '{print $2}' 2>/dev/null || echo "")
  if [ "$STATUS" = "done" ] || [ "$STATUS" = "failed" ]; then
    echo "Warning: Agent already $STATUS - entering read-only session" >&2
  fi
fi

echo "" >&2
echo "Entering agent $AGENT_ID ($AGENT_STATUS)" >&2
echo "Session: $SESSION_ID" >&2

# Get parent PID to kill the wrapper
PARENT_PID=$(jq -r ".\"$AGENT_ID\".parentPid // empty" "$REGISTRY" 2>/dev/null || echo "")

# Write marker file for wrapper to detect session switch
WRAPPER_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
NEXT_SESSION_FILE="$WRAPPER_DIR/.next-session"

log_debug "Writing marker: $NEXT_SESSION_FILE"
log_debug "Session ID: $SESSION_ID"
log_debug "Parent PID: $PARENT_PID"

echo "$SESSION_ID" > "$NEXT_SESSION_FILE"
if debug_enabled; then
  marker_content=$(cat "$NEXT_SESSION_FILE")
  log_debug "Marker written: $marker_content"
fi

# Write current agent ID file so exit-agent knows which agent we are
CURRENT_AGENT_FILE="$WRAPPER_DIR/.current-agent-id"
echo "$AGENT_ID" > "$CURRENT_AGENT_FILE"
log_debug "Agent ID file written: $AGENT_ID"

# Kill parent CLI process (signals wrapper to wake up and resume new session)
if [ -n "$PARENT_PID" ]; then
  log_debug "Killing parent PID: $PARENT_PID"
  sleep 0.2
  if debug_enabled; then
    kill "$PARENT_PID" 2>&1 | sed 's/^/[DEBUG] /' >&2 || log_debug "Kill failed or already dead"
  else
    kill "$PARENT_PID" >/dev/null 2>&1 || true
  fi
fi

log_debug "Exiting enter-agent"
# Exit to let wrapper detect the marker and switch
exit 0
